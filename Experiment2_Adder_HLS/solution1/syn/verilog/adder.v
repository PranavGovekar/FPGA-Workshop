// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="adder_adder,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.693000,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=8,HLS_VERSION=2022_2}" *)

module adder (
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        A,
        B,
        Cin,
        ap_return
);


input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [1:0] A;
input  [1:0] B;
input  [1:0] Cin;
output  [2:0] ap_return;

wire  signed [2:0] sext_ln186_fu_44_p1;
wire  signed [2:0] sext_ln6_fu_52_p1;
wire   [2:0] add_ln6_1_fu_56_p2;
wire  signed [2:0] sext_ln186_1_fu_48_p1;
wire    ap_ce_reg;

assign add_ln6_1_fu_56_p2 = ($signed(sext_ln186_fu_44_p1) + $signed(sext_ln6_fu_52_p1));

assign ap_done = ap_start;

assign ap_idle = 1'b1;

assign ap_ready = ap_start;

assign ap_return = ($signed(add_ln6_1_fu_56_p2) + $signed(sext_ln186_1_fu_48_p1));

assign sext_ln186_1_fu_48_p1 = $signed(B);

assign sext_ln186_fu_44_p1 = $signed(A);

assign sext_ln6_fu_52_p1 = $signed(Cin);

endmodule //adder
